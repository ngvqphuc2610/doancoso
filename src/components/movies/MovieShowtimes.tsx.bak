import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import SeatSelection from './SeatSelection';
inte    const handleCinemaSelection = (cinemaId: number) => {
        //  nếu nhấn vào đã chọn, đóng nó lại
        if (selectedCinema === cinemaId) {
            setSelectedCinema(null); // Đặt về null để đóng đang mở
        } else {
            setSelectedCinema(cinemaId); // Mở cinema mới được chọn
            setSelectedTime(null); // Reset selected time when changing cinema
        }
    };
    
    const handleTimeSelection = (timeId: number) => {wTime {
    id: number;
    time: string;
    endTime: string;
    date: string;
    room: string;
    roomType: string;
    format: string;
    price: number;
    available_seats: number;
    total_seats: number;
}

interface Cinema {
    id: number;
    name: string;
    address: string;
    showTimes: ShowTime[];
}

// Interface cho cinema từ API
interface CinemaData {
    id_cinema: number;
    cinema_name: string;
    address: string;
    city: string;
    description?: string;
    image?: string;
    contact_number?: string;
    email?: string;
    status: string;
}

interface ShowtimeData {
    date: string;
    cinemas: Cinema[];
}

interface MovieShowtimesProps {
    movieId: string | number;
    status?: string;
    releaseDate?: string;
}


export default function MovieShowtimes({ movieId, status, releaseDate }: MovieShowtimesProps) {
    const [selectedDate, setSelectedDate] = useState<string>('');
    const [selectedCinema, setSelectedCinema] = useState<number | null>(null);
    const [selectedTime, setSelectedTime] = useState<number | null>(null);
    const [showtimes, setShowtimes] = useState<ShowtimeData[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [cities, setCities] = useState<string[]>([]);
    const [selectedCity, setSelectedCity] = useState('Hồ Chí Minh');
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);    // State to store the mapping of cinema names to their cities
    const [cinemaToCity, setCinemaToCity] = useState<{ [key: string]: string }>({});

    // Fetch thành phố từ API cinemas
    useEffect(() => {
        const fetchCities = async () => {
            try {
                const response = await fetch('/api/cinemas');

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    // Lọc các thành phố duy nhất từ dữ liệu cinema
                    const cinemas: CinemaData[] = data.data;
                    const uniqueCities = [...new Set(cinemas.map(cinema => cinema.city))].filter(Boolean);
                    setCities(uniqueCities);

                    // Create mapping of cinema names to their cities
                    const mapping: { [key: string]: string } = {};
                    cinemas.forEach(cinema => {
                        if (cinema.cinema_name && cinema.city) {
                            mapping[cinema.cinema_name] = cinema.city;
                        }
                    });
                    setCinemaToCity(mapping);

                    // Nếu có thành phố, chọn thành phố đầu tiên làm mặc định
                    if (uniqueCities.length > 0) {
                        setSelectedCity(uniqueCities[0]);
                    }
                }
            } catch (error) {
                console.error('Error fetching cities:', error);
            }
        };

        fetchCities();
    }, []);    // Fetch showtimes data when movie ID changes
    useEffect(() => {
        const fetchShowtimes = async () => {
            try {
                // Ensure movieId is handled as string in the query
                const response = await fetch(`/api/showtimes?movieId=${String(movieId)}`);

                // Check if response is ok and is JSON
                const contentType = response.headers.get("content-type");
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                if (!contentType || !contentType.includes("application/json")) {
                    throw new Error("API did not return JSON");
                }

                const data = await response.json();

                if (data.success) {
                    setShowtimes(data.data);

                    // If there are showtimes, select the first date by default
                    if (data.data && data.data.length > 0) {
                        setSelectedDate(data.data[0].date);
                    }
                } else {
                    setError(data.error || 'Không thể tải lịch chiếu');
                }
            } catch (err) {
                console.error("Fetch error:", err);
                setError('Đã có lỗi xảy ra khi tải lịch chiếu');
            } finally {
                setIsLoading(false);
            }
        };

        if (movieId) {
            fetchShowtimes();
        }
    }, [movieId]);

    const handleDateSelection = (date: string) => {
        setSelectedDate(date);
        setSelectedCinema(null);
        setSelectedTime(null);
    };


    const handleCinemaSelection = (cinemaId: number) => {
        //  nếu nhấn vào đã chọn, đóng nó lại
        if (selectedCinema === cinemaId) {
            setSelectedCinema(null); // Đặt về null để đóng đang mở
        } else {
            setSelectedCinema(cinemaId); // Mở cinema mới được chọn
            setSelectedTime(null); // Reset selected time when changing cinema
        }
    }; const handleTimeSelection = (timeId: number) => {
        // Chỉ cập nhật state khi có ID hợp lệ
        if (timeId && typeof timeId === 'number') {
            setSelectedTime(timeId);
        } else {
            console.error('Invalid showtime ID:', timeId);
            setError('Lỗi khi chọn suất chiếu');
        }
    };

    return (
        <div className="container mx-auto px-0 mt-8 text-center">
            <div className=" rounded-lg p-6">


                <h2 className="text-2xl font-bold text-white mb-6 text-center">Lịch Chiếu</h2>

                {isLoading ? (
                    <div className="text-center text-white py-8">
                        <div className="animate-pulse">
                            <p>Đang tải lịch chiếu...</p>
                        </div>
                    </div>
                ) : error ? (
                    <div className="text-center text-red-500 py-8">
                        <p>{error}</p>
                    </div>
                ) : showtimes.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-12 px-4">
                        <img
                            src="/images/icon-infofilm-clock.svg"
                            alt="No showtimes"
                            className="w-16 h-16 mb-4 opacity-50"
                        />
                        <h3 className="text-xl font-semibold text-white mb-2">
                            Hiện chưa có lịch chiếu
                        </h3>
                        <p className="text-gray-400 text-center max-w-md">
                            {status === 'coming soon' && releaseDate
                                ? `Phim sẽ khởi chiếu từ ngày ${new Date(releaseDate).toLocaleDateString('vi-VN')}`
                                : 'Vui lòng quay lại sau để xem lịch chiếu của phim này.'}
                        </p>
                        {status === 'coming soon' && releaseDate && (
                            <div className="mt-6 flex items-center gap-2">
                                <span className="px-4 py-2 bg-red-600 text-white rounded-full text-sm">
                                    Sắp chiếu
                                </span>
                                <span className="text-gray-400">
                                    ⌛ {Math.ceil((new Date(releaseDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))} ngày nữa
                                </span>
                            </div>
                        )}
                    </div>
                ) : (
                    <>
                        {/* Chọn ngày */}
                        <div className="mb-6 flex justify-center">
                            <div className="flex gap-4 overflow-x-auto pb-2">
                                {showtimes.map(showtime => (
                                    <Button
                                        key={showtime.date}
                                        onClick={() => handleDateSelection(showtime.date)}
                                        variant={selectedDate === showtime.date ? "custom9" : "custom8"}
                                        size="custom8"
                                        width="custom8"
                                        className={`py-8 rounded whitespace-nowrap ${selectedDate === showtime.date ? '' : ''}`}
                                    >
                                        {(() => {
                                            const date = new Date(showtime.date);
                                            const day = date.getDate();
                                            const month = date.getMonth() + 1;
                                            const weekday = date.toLocaleDateString('vi-VN', { weekday: 'long' });
                                            return (
                                                <>
                                                    {`${day}/${month}`}
                                                    <br />
                                                    {weekday.toUpperCase()}
                                                </>
                                            );
                                        })()}
                                    </Button>
                                ))}
                            </div>
                        </div>

                        {/* Danh sách rạp */}
                        {selectedDate && (
                            <div className="mb-6 ">
                                {/* đầu của danh sách rạp */}
                                <div className="flex flex-col mb-4">
                                    <div className="flex items-center justify-between mb-3">
                                        <h3 className="text-4xl font-semibold text-white">Danh Sách Rạp</h3>
                                        <div className="relative">
                                            {/* Dropdown cho thành phố */}
                                            <button
                                                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                                                className="flex items-center gap-2 px-4 py-2 bg-gray-800 rounded text-white hover:bg-gray-700"
                                            >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
                                                </svg>
                                                {selectedCity}
                                                <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 transition-transform ${isDropdownOpen ? 'rotate-180' : ''}`} viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                                                </svg>
                                            </button>
                                            {/* Dropdown Menu */}
                                            {isDropdownOpen && (
                                                <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50">
                                                    <div className="py-1" role="menu" aria-orientation="vertical">
                                                        {cities.map((city) => (
                                                            <button
                                                                key={city}
                                                                onClick={() => {
                                                                    setSelectedCity(city);
                                                                    setIsDropdownOpen(false);
                                                                }}
                                                                className={`block px-4 py-2 text-sm w-full text-left ${selectedCity === city
                                                                    ? 'bg-gray-100 text-gray-900'
                                                                    : 'text-gray-700 hover:bg-gray-50'
                                                                    }`}
                                                                role="menuitem"
                                                            >
                                                                {city}
                                                            </button>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>                                        {/* Danh sách rạp */}
                                <div>
                                    <div className="space-y-6">
                                        {showtimes
                                            .find(st => st.date === selectedDate)
                                            ?.cinemas.filter(cinema => {
                                                // Filter cinemas based on the selected city using our mapping
                                                const cinemaCity = cinemaToCity[cinema.name];
                                                return !selectedCity || cinemaCity === selectedCity;
                                            })
                                            .map(cinema => (
                                                <div key={cinema.id} className="bg-purple-800 rounded-lg overflow-hidden">
                                                    {/* Header phần rạp phim */}
                                                    <div
                                                        className="p-4 cursor-pointer"
                                                        onClick={() => handleCinemaSelection(cinema.id)}
                                                    >
                                                        <div className="flex justify-between items-center">
                                                            <div>
                                                                <h4 className="text-yellow-400 font-semibold text-xl">{cinema.name}</h4>
                                                                <p className="text-white text-sm">{cinema.address}</p>
                                                            </div>
                                                            <div>
                                                                <svg
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                    className={`h-6 w-6 text-white transition-transform ${selectedCinema === cinema.id ? 'rotate-180' : ''}`}
                                                                    fill="none"
                                                                    viewBox="0 0 24 24"
                                                                    stroke="currentColor"
                                                                >
                                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                                                </svg>
                                                            </div>
                                                        </div>
                                                    </div>                                                    {/* Phần suất chiếu chỉ hiển thị khi rạp được chọn */}
                                                    {selectedCinema === cinema.id && (
                                                        <div className="p-4 pt-0">
                                                            {/* Group showtimes by screenType */}
                                                            {(() => {
                                                                // Get unique screen types
                                                                const screenTypes = [...new Set(cinema.showTimes.map(time => time.roomType))];

                                                                return screenTypes.map((screenType, index) => (
                                                                    <div key={screenType || `screentype-${index}`} className="mb-6">
                                                                        {/* Loại phòng chiếu - Hiển thị screenType từ API */}
                                                                        <div className="mb-3">
                                                                            <h5 className="text-white font-medium text-lg">{screenType || 'Standard'}</h5>
                                                                        </div>

                                                                        {/* Danh sách các suất chiếu cho loại phòng này */}
                                                                        <div className="flex flex-wrap gap-2">                                                                            {cinema.showTimes
                                                                            .filter(time => time.roomType === screenType)
                                                                            .map(time => (
                                                                                <Button
                                                                                    key={time.id}
                                                                                    onClick={() => handleTimeSelection(time.id)}
                                                                                    variant={selectedTime === time.id ? "custom13" : "custom12"}
                                                                                    size="custom12"
                                                                                    disabled={time.available_seats === 0}
                                                                                >
                                                                                    {time.time}
                                                                                </Button>
                                                                            ))}
                                                                        </div>
                                                                    </div>
                                                                ))
                                                            })()
                                                        </div>
                                                    )}
                                                </div>
                                            ))}
                                    </div>
                                </div>
                                {/* Chọn ghế */}
                                {selectedTime && (
                                    <div className="mt-6">
                                        <h3 className="text-lg font-semibold text-white mb-3">Chọn Ghế</h3>
                                        <SeatSelection
                                            showtimeId={selectedTime}
                                            cinemaName={showtimes.find(st => st.date === selectedDate)
                                                ?.cinemas.find(c => c.id === selectedCinema)?.name || ''}
                                            screenName={showtimes.find(st => st.date === selectedDate)
                                                ?.cinemas.find(c => c.id === selectedCinema)
                                                ?.showTimes.find(t => t.id === selectedTime)?.room || ''}
                                            onConfirm={() => { }}
                                        />
                                    </div>
                                )}

                                {/* Nút đặt vé */}
                                {selectedTime && (
                                    <div className="mt-6">
                                        <Button
                                            className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 text-lg"
                                            onClick={() => {
                                                // Để tối ưu, lưu các giá trị tìm thấy vào biến
                                                const selectedShowtime = showtimes.find(st => st.date === selectedDate);
                                                const selectedCinemaData = selectedShowtime?.cinemas.find(c => c.id === selectedCinema);
                                                const selectedTimeData = selectedCinemaData?.showTimes.find(t => t.id === selectedTime);

                                                window.location.href = `/book-tickets?showtime=${selectedTime}&cinemaName=${encodeURIComponent(
                                                    selectedCinemaData?.name || ''
                                                )}&screenName=${encodeURIComponent(
                                                    selectedTimeData?.room || ''
                                                )}`;
                                            }}
                                        >
                                            Đặt Vé Ngay
                                        </Button>
                                    </div>
                                )}
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    );
}
